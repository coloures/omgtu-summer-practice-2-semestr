#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Практическая работа №5. Идиома производитель-потребитель.

**Цель:** Изучить примитив синхронизации Очередь сообщений.

**Результаты:** После выполнения работы Вы сможете:
1. Передавать данные между потоками.
2. Изучите примтив синхронизации, который используется в современных архитектурах высоко-нагруженных приложений Event Loop


**Материалы для самостоятельного изучения**.
1. [Потоко-безопасные коллекции](https://learn.microsoft.com/en-us/dotnet/standard/collections/thread-safe/)
2. Идиома производитель-потребитель Глава 4 книги Г. Эндрюс Основы многопоточного, параллельного и распределенного программирования

## Задание.
Реализовать приложение Ping-Pong.

Создать дав потока, каждый из которых в цикле читает данные из BlockingCollection<Message>. После того, как поток прочитал объект из очереди, вызвал его метод Handle(), он создает новый объект класса Message и записывает его в очередь другого потока. Каждый поток всего должен обработать 100 сообщений.

**Указание**.
1. Как запустить процесс обмена объектами Message между потоками? Первый объект Message пишем в очередь одного из потоков прямо из кода, коорый жти потоки стартовал.
2. Не забываем дождаться завершения работы потоков.

#!csharp

#r "nuget: xunit, 2.8.1"
using System.Threading;
using System.Collections.Concurrent;
using Xunit;

static int counter = 0;
static int number = 0;
static int usingResource = 0;

class Message
{
    static int messageHandled = 0;
    int id;
    public Message()
    {
        id = Thread.CurrentThread.ManagedThreadId;
    }

    public void Handle()
    {
        Interlocked.Increment(ref messageHandled);
        Assert.NotEqual(id, Thread.CurrentThread.ManagedThreadId);
    }

    public static void Check()
    {
        Assert.Equal(200, messageHandled);
    }
}

#!csharp

static void UseResource(BlockingCollection<Message> queue_from, BlockingCollection<Message> queue_to) 
{
    if (0 == Interlocked.Exchange(ref usingResource, 1))
    {
        Message current = queue_from.Take();
        current.Handle();
        Interlocked.Increment(ref number);
        if (queue_to.IsAddingCompleted)
        {
            queue_from.CompleteAdding();
            Interlocked.Exchange(ref usingResource, 0);
            Interlocked.Increment(ref counter);
            return;
        }
        else 
        {
            queue_to.Add(new Message());
        }
        if (number == 199) 
        { 
            queue_from.CompleteAdding(); 
            Interlocked.Increment(ref counter); 
            Interlocked.Exchange(ref usingResource, 0); 
            return; 
        }
        else 
        {
            Interlocked.Exchange(ref usingResource, 0);
        }
    }
}

#!csharp

var queue1 = new BlockingCollection<Message>(2); //очередь первого потока
var queue2 = new BlockingCollection<Message>(2); //очередь второго потока

queue1.Add(new Message());
//Producer
Thread producer = new Thread(() =>
{
    while (!queue1.IsAddingCompleted)
    {
        if (queue2.Count == 0) 
        {
            UseResource(queue1, queue2);
        }
    }
});
// Consumer
Thread consumer = new Thread(() =>
{
    while (!queue1.IsAddingCompleted || queue2.Count != 0)
    {
        if (queue1.Count == 0) 
        {
            UseResource(queue2, queue1);
        }
    }
});
producer.Start(); 
consumer.Start();
while (counter != 2) { }
Message.Check();

#!csharp

Assert.Equal(0, queue1.Count);
Assert.Equal(0, queue2.Count);
Message.Check();
